        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <math.h>
        -:    5:#include <stdio.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 270 returned 100% blocks executed 83%
      270:    8:int compare(const void *a, const void *b) {
      270:    9:  if (*(int *)a > *(int *)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      270:   11:  if (*(int *)a < *(int *)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       72:   12:    return -1;
      198:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState *newGame() {
    #####:   17:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:  int *k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 7 returned 100% blocks executed 94%
        7:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  // set up random number generator
        7:   44:  SelectStream(1);
call    0 returned 100%
        7:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  // check number of players
        7:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   49:    return -1;
        -:   50:  }
        -:   51:
        -:   52:  // set number of players
        7:   53:  state->numPlayers = numPlayers;
        -:   54:
        -:   55:  // check selected kingdom cards are different
       77:   56:  for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      770:   57:    for (j = 0; j < 10; j++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      700:   58:      if (j != i && kingdomCards[j] == kingdomCards[i]) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   59:        return -1;
        -:   60:      }
        -:   61:    }
        -:   62:  }
        -:   63:
        -:   64:  // initialize supply
        -:   65:  ///////////////////////////////
        -:   66:
        -:   67:  // set number of Curse cards
        7:   68:  if (numPlayers == 2) {
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        5:   69:    state->supplyCount[curse] = 10;
        2:   70:  } else if (numPlayers == 3) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   71:    state->supplyCount[curse] = 20;
        -:   72:  } else {
        2:   73:    state->supplyCount[curse] = 30;
        -:   74:  }
        -:   75:
        -:   76:  // set number of Victory cards
        7:   77:  if (numPlayers == 2) {
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        5:   78:    state->supplyCount[estate] = 8;
        5:   79:    state->supplyCount[duchy] = 8;
        5:   80:    state->supplyCount[province] = 8;
        -:   81:  } else {
        2:   82:    state->supplyCount[estate] = 12;
        2:   83:    state->supplyCount[duchy] = 12;
        2:   84:    state->supplyCount[province] = 12;
        -:   85:  }
        -:   86:
        -:   87:  // set number of Treasure cards
        7:   88:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:   89:  state->supplyCount[silver] = 40;
        7:   90:  state->supplyCount[gold] = 30;
        -:   91:
        -:   92:  // set number of Kingdom cards
      147:   93:  for (i = adventurer; i <= treasure_map; i++) // loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:   94:  {
     1155:   95:    for (j = 0; j < 10; j++) // loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:   96:    {
     1085:   97:      if (kingdomCards[j] == i) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:   98:        // check if card is a 'Victory' Kingdom card
       70:   99:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
       18:  100:          if (numPlayers == 2) {
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
        7:  101:            state->supplyCount[i] = 8;
        -:  102:          } else {
        2:  103:            state->supplyCount[i] = 12;
        -:  104:          }
        -:  105:        } else {
       61:  106:          state->supplyCount[i] = 10;
        -:  107:        }
       70:  108:        break;
        -:  109:      } else // card is not in the set choosen for the game
        -:  110:      {
     1015:  111:        state->supplyCount[i] = -1;
        -:  112:      }
        -:  113:    }
        -:  114:  }
        -:  115:
        -:  116:  ////////////////////////
        -:  117:  // supply intilization complete
        -:  118:
        -:  119:  // set player decks
       25:  120:  for (i = 0; i < numPlayers; i++) {
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
       18:  121:    state->deckCount[i] = 0;
       72:  122:    for (j = 0; j < 3; j++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
       54:  123:      state->deck[i][j] = estate;
       54:  124:      state->deckCount[i]++;
        -:  125:    }
      144:  126:    for (j = 3; j < 10; j++) {
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
      126:  127:      state->deck[i][j] = copper;
      126:  128:      state->deckCount[i]++;
        -:  129:    }
        -:  130:  }
        -:  131:
        -:  132:  // shuffle player decks
       25:  133:  for (i = 0; i < numPlayers; i++) {
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
       18:  134:    if (shuffle(i, state) < 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  135:      return -1;
        -:  136:    }
        -:  137:  }
        -:  138:
        -:  139:  // draw player hands
       25:  140:  for (i = 0; i < numPlayers; i++) {
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  141:    // initialize hand size to zero
       18:  142:    state->handCount[i] = 0;
       18:  143:    state->discardCount[i] = 0;
        -:  144:    // draw 5 cards
        -:  145:    // for (j = 0; j < 5; j++)
        -:  146:    //	{
        -:  147:    //	  drawCard(i, state);
        -:  148:    //	}
        -:  149:  }
        -:  150:
        -:  151:  // set embargo tokens to 0 for all supply piles
      196:  152:  for (i = 0; i <= treasure_map; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      189:  153:    state->embargoTokens[i] = 0;
        -:  154:  }
        -:  155:
        -:  156:  // initialize first player's turn
        7:  157:  state->outpostPlayed = 0;
        7:  158:  state->phase = 0;
        7:  159:  state->numActions = 1;
        7:  160:  state->numBuys = 1;
        7:  161:  state->playedCardCount = 0;
        7:  162:  state->whoseTurn = 0;
        7:  163:  state->handCount[state->whoseTurn] = 0;
        -:  164:  // int it; move to top
        -:  165:
        -:  166:  // Moved draw cards to here, only drawing at the start of a turn
       42:  167:  for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       35:  168:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  169:  }
        -:  170:
        7:  171:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  172:
        7:  173:  return 0;
        -:  174:}
        -:  175:
function shuffle called 18 returned 100% blocks executed 94%
       18:  176:int shuffle(int player, struct gameState *state) {
        -:  177:
        -:  178:  int newDeck[MAX_DECK];
       18:  179:  int newDeckPos = 0;
        -:  180:  int card;
        -:  181:  int i;
        -:  182:
       18:  183:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  184:    return -1;
       18:  185:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int),
call    0 returned 100%
        -:  186:        compare);
        -:  187:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  188:
      216:  189:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      180:  190:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      180:  191:    newDeck[newDeckPos] = state->deck[player][card];
      180:  192:    newDeckPos++;
      683:  193:    for (i = card; i < state->deckCount[player] - 1; i++) {
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
      503:  194:      state->deck[player][i] = state->deck[player][i + 1];
        -:  195:    }
      180:  196:    state->deckCount[player]--;
        -:  197:  }
      198:  198:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      180:  199:    state->deck[player][i] = newDeck[i];
      180:  200:    state->deckCount[player]++;
        -:  201:  }
        -:  202:
       18:  203:  return 0;
        -:  204:}
        -:  205:
function playCard called 0 returned 0% blocks executed 0%
    #####:  206:int playCard(int handPos, int choice1, int choice2, int choice3,
        -:  207:             struct gameState *state) {
        -:  208:  int card;
    #####:  209:  int coin_bonus = 0; // tracks coins gain from actions
        -:  210:
        -:  211:  // check if it is the right phase
    #####:  212:  if (state->phase != 0) {
branch  0 never executed
branch  1 never executed
    #####:  213:    return -1;
        -:  214:  }
        -:  215:
        -:  216:  // check if player has enough actions
    #####:  217:  if (state->numActions < 1) {
branch  0 never executed
branch  1 never executed
    #####:  218:    return -1;
        -:  219:  }
        -:  220:
        -:  221:  // get card played
    #####:  222:  card = handCard(handPos, state);
call    0 never executed
        -:  223:
        -:  224:  // check if selected card is an action
    #####:  225:  if (card < adventurer || card > treasure_map) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  226:    return -1;
        -:  227:  }
        -:  228:
        -:  229:  // play card
    #####:  230:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) <
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  231:      0) {
    #####:  232:    return -1;
        -:  233:  }
        -:  234:
        -:  235:  // reduce number of actions
    #####:  236:  state->numActions--;
        -:  237:
        -:  238:  // update coins (Treasure cards may be added with card draws)
    #####:  239:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  240:
    #####:  241:  return 0;
        -:  242:}
        -:  243:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  244:int buyCard(int supplyPos, struct gameState *state) {
        -:  245:  int who;
        -:  246:  if (DEBUG) {
        -:  247:    printf("Entering buyCard...\n");
        -:  248:  }
        -:  249:
        -:  250:  // I don't know what to do about the phase thing.
        -:  251:
    #####:  252:  who = state->whoseTurn;
        -:  253:
    #####:  254:  if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  255:    if (DEBUG)
        -:  256:      printf("You do not have any buys left\n");
    #####:  257:    return -1;
    #####:  258:  } else if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    if (DEBUG)
        -:  260:      printf("There are not any of that type of card left\n");
    #####:  261:    return -1;
    #####:  262:  } else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  263:    if (DEBUG)
        -:  264:      printf("You do not have enough money to buy that. You have %d coins.\n",
        -:  265:             state->coins);
    #####:  266:    return -1;
        -:  267:  } else {
    #####:  268:    state->phase = 1;
        -:  269:    // state->supplyCount[supplyPos]--;
    #####:  270:    gainCard(supplyPos, state, 0,
call    0 never executed
        -:  271:             who); // card goes in discard, this might be wrong.. (2 means goes
        -:  272:                   // into hand, 0 goes into discard)
        -:  273:
    #####:  274:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  275:    state->numBuys--;
        -:  276:    if (DEBUG)
        -:  277:      printf("You bought card number %d for %d coins. You now have %d buys and "
        -:  278:             "%d coins.\n",
        -:  279:             supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  280:  }
        -:  281:
        -:  282:  // state->discard[who][state->discardCount[who]] = supplyPos;
        -:  283:  // state->discardCount[who]++;
        -:  284:
    #####:  285:  return 0;
        -:  286:}
        -:  287:
function numHandCards called 4 returned 100% blocks executed 100%
        4:  288:int numHandCards(struct gameState *state) {
        4:  289:  return state->handCount[whoseTurn(state)];
call    0 returned 100%
        -:  290:}
        -:  291:
function handCard called 12 returned 100% blocks executed 100%
       12:  292:int handCard(int handPos, struct gameState *state) {
       12:  293:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       12:  294:  return state->hand[currentPlayer][handPos];
        -:  295:}
        -:  296:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  297:int supplyCount(int card, struct gameState *state) {
    #####:  298:  return state->supplyCount[card];
        -:  299:}
        -:  300:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  301:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  302:  int i;
    #####:  303:  int count = 0;
        -:  304:
    #####:  305:  for (i = 0; i < state->deckCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  306:    if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  307:      count++;
        -:  308:  }
        -:  309:
    #####:  310:  for (i = 0; i < state->handCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  311:    if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  312:      count++;
        -:  313:  }
        -:  314:
    #####:  315:  for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  316:    if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  317:      count++;
        -:  318:  }
        -:  319:
    #####:  320:  return count;
        -:  321:}
        -:  322:
function whoseTurn called 24 returned 100% blocks executed 100%
       24:  323:int whoseTurn(struct gameState *state) { return state->whoseTurn; }
        -:  324:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  325:int endTurn(struct gameState *state) {
        -:  326:  int k;
        -:  327:  int i;
    #####:  328:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  329:
        -:  330:  // Discard hand
    #####:  331:  for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  332:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
    #####:  333:        state->hand[currentPlayer][i];  // Discard
    #####:  334:    state->hand[currentPlayer][i] = -1; // Set card to -1
        -:  335:  }
    #####:  336:  state->handCount[currentPlayer] = 0; // Reset hand count
        -:  337:
        -:  338:  // Code for determining the player
    #####:  339:  if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  340:    state->whoseTurn = currentPlayer + 1; // Still safe to increment
        -:  341:  } else {
    #####:  342:    state->whoseTurn =
        -:  343:        0; // Max player has been reached, loop back around to player 1
        -:  344:  }
        -:  345:
    #####:  346:  state->outpostPlayed = 0;
    #####:  347:  state->phase = 0;
    #####:  348:  state->numActions = 1;
    #####:  349:  state->coins = 0;
    #####:  350:  state->numBuys = 1;
    #####:  351:  state->playedCardCount = 0;
    #####:  352:  state->handCount[state->whoseTurn] = 0;
        -:  353:
        -:  354:  // int k; move to top
        -:  355:  // Next player draws hand
    #####:  356:  for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  357:    drawCard(state->whoseTurn, state); // Draw a card
call    0 never executed
        -:  358:  }
        -:  359:
        -:  360:  // Update money
    #####:  361:  updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  362:
    #####:  363:  return 0;
        -:  364:}
        -:  365:
function isGameOver called 5 returned 100% blocks executed 100%
        5:  366:int isGameOver(struct gameState *state) {
        -:  367:  int i;
        -:  368:  int j;
        -:  369:
        -:  370:  // if stack of Province cards is empty, the game ends
        5:  371:  if (state->supplyCount[province] == 0) {
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        1:  372:    return 1;
        -:  373:  }
        -:  374:
        -:  375:  // if three supply pile are at 0, the game ends
        4:  376:  j = 0;
      104:  377:  for (i = 0; i < 25; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      100:  378:    if (state->supplyCount[i] == 0) {
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        7:  379:      j++;
        -:  380:    }
        -:  381:  }
        4:  382:  if (j >= 3) {
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:  383:    return 1;
        -:  384:  }
        -:  385:
        3:  386:  return 0;
        -:  387:}
        -:  388:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  389:int scoreFor(int player, struct gameState *state) {
        -:  390:
        -:  391:  int i;
    #####:  392:  int score = 0;
        -:  393:  // score from hand
    #####:  394:  for (i = 0; i < state->handCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  395:    if (state->hand[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  396:      score = score - 1;
        -:  397:    };
    #####:  398:    if (state->hand[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  399:      score = score + 1;
        -:  400:    };
    #####:  401:    if (state->hand[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  402:      score = score + 3;
        -:  403:    };
    #####:  404:    if (state->hand[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  405:      score = score + 6;
        -:  406:    };
    #####:  407:    if (state->hand[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  408:      score = score + 1;
        -:  409:    };
    #####:  410:    if (state->hand[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  411:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  412:    };
        -:  413:  }
        -:  414:
        -:  415:  // score from discard
    #####:  416:  for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  417:    if (state->discard[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  418:      score = score - 1;
        -:  419:    };
    #####:  420:    if (state->discard[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  421:      score = score + 1;
        -:  422:    };
    #####:  423:    if (state->discard[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  424:      score = score + 3;
        -:  425:    };
    #####:  426:    if (state->discard[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  427:      score = score + 6;
        -:  428:    };
    #####:  429:    if (state->discard[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  430:      score = score + 1;
        -:  431:    };
    #####:  432:    if (state->discard[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  433:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  434:    };
        -:  435:  }
        -:  436:
        -:  437:  // score from deck
    #####:  438:  for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  439:    if (state->deck[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  440:      score = score - 1;
        -:  441:    };
    #####:  442:    if (state->deck[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  443:      score = score + 1;
        -:  444:    };
    #####:  445:    if (state->deck[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  446:      score = score + 3;
        -:  447:    };
    #####:  448:    if (state->deck[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  449:      score = score + 6;
        -:  450:    };
    #####:  451:    if (state->deck[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  452:      score = score + 1;
        -:  453:    };
    #####:  454:    if (state->deck[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  455:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  456:    };
        -:  457:  }
        -:  458:
    #####:  459:  return score;
        -:  460:}
        -:  461:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  462:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  463:  int i;
        -:  464:  int j;
        -:  465:  int highScore;
        -:  466:  int currentPlayer;
        -:  467:
        -:  468:  // get score for each player
    #####:  469:  for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
        -:  470:    // set unused player scores to -9999
    #####:  471:    if (i >= state->numPlayers) {
branch  0 never executed
branch  1 never executed
    #####:  472:      players[i] = -9999;
        -:  473:    } else {
    #####:  474:      players[i] = scoreFor(i, state);
call    0 never executed
        -:  475:    }
        -:  476:  }
        -:  477:
        -:  478:  // find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  481:    if (players[i] > players[j]) {
branch  0 never executed
branch  1 never executed
    #####:  482:      j = i;
        -:  483:    }
        -:  484:  }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  // add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  490:    if (players[i] == highScore && i > currentPlayer) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  491:      players[i]++;
        -:  492:    }
        -:  493:  }
        -:  494:
        -:  495:  // find new highest score
    #####:  496:  j = 0;
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  498:    if (players[i] > players[j]) {
branch  0 never executed
branch  1 never executed
    #####:  499:      j = i;
        -:  500:    }
        -:  501:  }
    #####:  502:  highScore = players[j];
        -:  503:
        -:  504:  // set winners in array to 1 and rest to 0
    #####:  505:  for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  506:    if (players[i] == highScore) {
branch  0 never executed
branch  1 never executed
    #####:  507:      players[i] = 1;
        -:  508:    } else {
    #####:  509:      players[i] = 0;
        -:  510:    }
        -:  511:  }
        -:  512:
    #####:  513:  return 0;
        -:  514:}
        -:  515:
function drawCard called 41 returned 100% blocks executed 38%
       41:  516:int drawCard(int player, struct gameState *state) {
        -:  517:  int count;
        -:  518:  int deckCounter;
       41:  519:  if (state->deckCount[player] <= 0) { // Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  520:
        -:  521:    // Step 1 Shuffle the discard pile back into a deck
        -:  522:    int i;
        -:  523:    // Move discard to deck
    #####:  524:    for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  525:      state->deck[player][i] = state->discard[player][i];
    #####:  526:      state->discard[player][i] = -1;
        -:  527:    }
        -:  528:
    #####:  529:    state->deckCount[player] = state->discardCount[player];
    #####:  530:    state->discardCount[player] = 0; // Reset discard
        -:  531:
        -:  532:    // Shufffle the deck
    #####:  533:    shuffle(player,
call    0 never executed
        -:  534:            state); // Shuffle the deck up and make it so that we can draw
        -:  535:
        -:  536:    if (DEBUG) { // Debug statements
        -:  537:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  538:    }
        -:  539:
    #####:  540:    state->discardCount[player] = 0;
        -:  541:
        -:  542:    // Step 2 Draw Card
    #####:  543:    count = state->handCount[player]; // Get current player's hand count
        -:  544:
        -:  545:    if (DEBUG) { // Debug statements
        -:  546:      printf("Current hand count: %d\n", count);
        -:  547:    }
        -:  548:
    #####:  549:    deckCounter = state->deckCount[player]; // Create a holder for the deck
        -:  550:                                            // count
        -:  551:
    #####:  552:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  553:      return -1;
        -:  554:
    #####:  555:    state->hand[player][count] =
    #####:  556:        state->deck[player][deckCounter - 1]; // Add card to hand
    #####:  557:    state->deckCount[player]--;
    #####:  558:    state->handCount[player]++; // Increment hand count
        -:  559:  }
        -:  560:
        -:  561:  else {
       41:  562:    int count = state->handCount[player]; // Get current hand count for player
        -:  563:    int deckCounter;
        -:  564:    if (DEBUG) { // Debug statements
        -:  565:      printf("Current hand count: %d\n", count);
        -:  566:    }
        -:  567:
       41:  568:    deckCounter = state->deckCount[player]; // Create holder for the deck count
       41:  569:    state->hand[player][count] =
       41:  570:        state->deck[player][deckCounter - 1]; // Add card to the hand
       41:  571:    state->deckCount[player]--;
       41:  572:    state->handCount[player]++; // Increment hand count
        -:  573:  }
        -:  574:
       41:  575:  return 0;
        -:  576:}
        -:  577:
function getCost called 28 returned 100% blocks executed 100%
       28:  578:int getCost(int cardNumber) {
       28:  579:  switch (cardNumber) {
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 4%
        -:  580:  case curse:
        1:  581:    return 0;
        -:  582:  case estate:
        1:  583:    return 2;
        -:  584:  case duchy:
        1:  585:    return 5;
        -:  586:  case province:
        1:  587:    return 8;
        -:  588:  case copper:
        1:  589:    return 0;
        -:  590:  case silver:
        1:  591:    return 3;
        -:  592:  case gold:
        1:  593:    return 6;
        -:  594:  case adventurer:
        1:  595:    return 6;
        -:  596:  case council_room:
        1:  597:    return 5;
        -:  598:  case feast:
        1:  599:    return 4;
        -:  600:  case gardens:
        1:  601:    return 4;
        -:  602:  case mine:
        1:  603:    return 5;
        -:  604:  case remodel:
        1:  605:    return 4;
        -:  606:  case smithy:
        1:  607:    return 4;
        -:  608:  case village:
        1:  609:    return 3;
        -:  610:  case baron:
        1:  611:    return 4;
        -:  612:  case great_hall:
        1:  613:    return 3;
        -:  614:  case minion:
        1:  615:    return 5;
        -:  616:  case steward:
        1:  617:    return 3;
        -:  618:  case tribute:
        1:  619:    return 5;
        -:  620:  case ambassador:
        1:  621:    return 3;
        -:  622:  case cutpurse:
        1:  623:    return 4;
        -:  624:  case embargo:
        1:  625:    return 2;
        -:  626:  case outpost:
        1:  627:    return 5;
        -:  628:  case salvager:
        1:  629:    return 4;
        -:  630:  case sea_hag:
        1:  631:    return 4;
        -:  632:  case treasure_map:
        1:  633:    return 4;
        -:  634:  }
        -:  635:
        1:  636:  return -1;
        -:  637:}
        -:  638:
function cardEffect called 4 returned 100% blocks executed 5%
        4:  639:int cardEffect(int card, int choice1, int choice2, int choice3,
        -:  640:               struct gameState *state, int handPos, int *bonus) {
        -:  641:  int i;
        -:  642:  int j;
        -:  643:  int k;
        -:  644:  int index;
        4:  645:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  646:
        -:  647:  // uses switch to select card and perform actions
        4:  648:  switch (card) {
branch  0 taken 25%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 25%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 25%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  649:  case adventurer:
        1:  650:    return adventurerCardEffect(state, currentPlayer);
call    0 returned 100%
        -:  651:
        -:  652:  case council_room:
        -:  653:    //+4 Cards
    #####:  654:    for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  655:      drawCard(currentPlayer, state);
call    0 never executed
        -:  656:    }
        -:  657:
        -:  658:    //+1 Buy
    #####:  659:    state->numBuys++;
        -:  660:
        -:  661:    // Each other player draws a card
    #####:  662:    for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  663:      if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  664:        drawCard(i, state);
call    0 never executed
        -:  665:      }
        -:  666:    }
        -:  667:
        -:  668:    // put played card in played card pile
    #####:  669:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  670:
    #####:  671:    return 0;
        -:  672:
        -:  673:  case feast:
    #####:  674:    return feastCardEffect(state, currentPlayer, choice1);
call    0 never executed
        -:  675:
        -:  676:  case gardens:
    #####:  677:    return -1;
        -:  678:
        -:  679:  case mine:
    #####:  680:    j = state->hand[currentPlayer][choice1]; // store card we will trash
        -:  681:
    #####:  682:    if (state->hand[currentPlayer][choice1] < copper ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  683:        state->hand[currentPlayer][choice1] > gold) {
    #####:  684:      return -1;
        -:  685:    }
        -:  686:
    #####:  687:    if (choice2 > treasure_map || choice2 < curse) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  688:      return -1;
        -:  689:    }
        -:  690:
    #####:  691:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  692:      return -1;
        -:  693:    }
        -:  694:
    #####:  695:    gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  696:
        -:  697:    // discard card from hand
    #####:  698:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  699:
        -:  700:    // discard trashed card
    #####:  701:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  702:      if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  703:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  704:        break;
        -:  705:      }
        -:  706:    }
        -:  707:
    #####:  708:    return 0;
        -:  709:
        -:  710:  case remodel:
    #####:  711:    j = state->hand[currentPlayer][choice1]; // store card we will trash
        -:  712:
    #####:  713:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  714:      return -1;
        -:  715:    }
        -:  716:
    #####:  717:    gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  718:
        -:  719:    // discard card from hand
    #####:  720:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  721:
        -:  722:    // discard trashed card
    #####:  723:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  724:      if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  725:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  726:        break;
        -:  727:      }
        -:  728:    }
        -:  729:
    #####:  730:    return 0;
        -:  731:
        -:  732:  case smithy:
        1:  733:    return smithyCardEffect(state, currentPlayer, handPos);
call    0 returned 100%
        -:  734:
        -:  735:  case village:
    #####:  736:    return villageCardEffect(state, currentPlayer, handPos);
call    0 never executed
        -:  737:
        -:  738:  case baron:
    #####:  739:    state->numBuys++;             // Increase buys by 1!
    #####:  740:    if (choice1 > 0) {            // Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  741:      int p = 0;                  // Iterator for hand!
    #####:  742:      int card_not_discarded = 1; // Flag for discard set!
    #####:  743:      while (card_not_discarded) {
branch  0 never executed
branch  1 never executed
    #####:  744:        if (state->hand[currentPlayer][p] == estate) { // Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  745:          state->coins += 4; // Add 4 coins to the amount of coins
    #####:  746:          state->discard[currentPlayer][state->discardCount[currentPlayer]] =
    #####:  747:              state->hand[currentPlayer][p];
    #####:  748:          state->discardCount[currentPlayer]++;
    #####:  749:          for (; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####:  750:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  751:          }
    #####:  752:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  753:          state->handCount[currentPlayer]--;
    #####:  754:          card_not_discarded = 0; // Exit the loop
    #####:  755:        } else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  756:          if (DEBUG) {
        -:  757:            printf("No estate cards in your hand, invalid choice\n");
        -:  758:            printf("Must gain an estate if there are any\n");
        -:  759:          }
    #####:  760:          if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  761:            gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  762:            state->supplyCount[estate]--; // Decrement estates
    #####:  763:            if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  764:              isGameOver(state);
call    0 never executed
        -:  765:            }
        -:  766:          }
    #####:  767:          card_not_discarded = 0; // Exit the loop
        -:  768:        }
        -:  769:
        -:  770:        else {
    #####:  771:          p++; // Next card
        -:  772:        }
        -:  773:      }
        -:  774:    }
        -:  775:
        -:  776:    else {
    #####:  777:      if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  778:        gainCard(estate, state, 0, currentPlayer); // Gain an estate
call    0 never executed
    #####:  779:        state->supplyCount[estate]--;              // Decrement Estates
    #####:  780:        if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  781:          isGameOver(state);
call    0 never executed
        -:  782:        }
        -:  783:      }
        -:  784:    }
        -:  785:
    #####:  786:    return 0;
        -:  787:
        -:  788:  case great_hall:
        -:  789:    //+1 Card
        1:  790:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  791:
        -:  792:    //+1 Actions
        1:  793:    state->numActions++;
        -:  794:
        -:  795:    // discard card from hand
        1:  796:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  797:    return 0;
        -:  798:
        -:  799:  case minion:
        -:  800:    //+1 action
    #####:  801:    state->numActions++;
        -:  802:
        -:  803:    // discard card from hand
    #####:  804:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  805:
    #####:  806:    if (choice1) //+2 coins
branch  0 never executed
branch  1 never executed
        -:  807:    {
    #####:  808:      state->coins = state->coins + 2;
        -:  809:    }
        -:  810:
    #####:  811:    else if (choice2) // discard hand, redraw 4, other players with 5+ cards
branch  0 never executed
branch  1 never executed
        -:  812:                      // discard hand and draw 4
        -:  813:    {
        -:  814:      // discard hand
    #####:  815:      while (numHandCards(state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  816:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  817:      }
        -:  818:
        -:  819:      // draw 4
    #####:  820:      for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  821:        drawCard(currentPlayer, state);
call    0 never executed
        -:  822:      }
        -:  823:
        -:  824:      // other players discard hand and redraw if hand size > 4
    #####:  825:      for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  826:        if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  827:          if (state->handCount[i] > 4) {
branch  0 never executed
branch  1 never executed
        -:  828:            // discard hand
    #####:  829:            while (state->handCount[i] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  830:              discardCard(handPos, i, state, 0);
call    0 never executed
        -:  831:            }
        -:  832:
        -:  833:            // draw 4
    #####:  834:            for (j = 0; j < 4; j++) {
branch  0 never executed
branch  1 never executed
    #####:  835:              drawCard(i, state);
call    0 never executed
        -:  836:            }
        -:  837:          }
        -:  838:        }
        -:  839:      }
        -:  840:    }
    #####:  841:    return 0;
        -:  842:
        -:  843:  case steward:
    #####:  844:    if (choice1 == 1) {
branch  0 never executed
branch  1 never executed
        -:  845:      //+2 cards
    #####:  846:      drawCard(currentPlayer, state);
call    0 never executed
    #####:  847:      drawCard(currentPlayer, state);
call    0 never executed
    #####:  848:    } else if (choice1 == 2) {
branch  0 never executed
branch  1 never executed
        -:  849:      //+2 coins
    #####:  850:      state->coins = state->coins + 2;
        -:  851:    } else {
        -:  852:      // trash 2 cards in hand
    #####:  853:      discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  854:      discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  855:    }
        -:  856:
        -:  857:    // discard card from hand
    #####:  858:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  859:    return 0;
        -:  860:
        -:  861:  case tribute:
    #####:  862:    return tributeCardEffect(state, currentPlayer);
call    0 never executed
        -:  863:
        -:  864:  case ambassador:
    #####:  865:    j = 0; // used to check if player has enough cards to discard
        -:  866:
    #####:  867:    if (choice2 > 2 || choice2 < 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  868:      return -1;
        -:  869:    }
        -:  870:
    #####:  871:    if (choice1 == handPos) {
branch  0 never executed
branch  1 never executed
    #####:  872:      return -1;
        -:  873:    }
        -:  874:
    #####:  875:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  876:      if (i != handPos && i == state->hand[currentPlayer][choice1] &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  877:          i != choice1) {
    #####:  878:        j++;
        -:  879:      }
        -:  880:    }
    #####:  881:    if (j < choice2) {
branch  0 never executed
branch  1 never executed
    #####:  882:      return -1;
        -:  883:    }
        -:  884:
        -:  885:    if (DEBUG)
        -:  886:      printf("Player %d reveals card number: %d\n", currentPlayer,
        -:  887:             state->hand[currentPlayer][choice1]);
        -:  888:
        -:  889:    // increase supply count for choosen card by amount being discarded
    #####:  890:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  891:
        -:  892:    // each other player gains a copy of revealed card
    #####:  893:    for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  894:      if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  895:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  896:      }
        -:  897:    }
        -:  898:
        -:  899:    // discard played card from hand
    #####:  900:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  901:
        -:  902:    // trash copies of cards returned to supply
    #####:  903:    for (j = 0; j < choice2; j++) {
branch  0 never executed
branch  1 never executed
    #####:  904:      for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  905:        if (state->hand[currentPlayer][i] ==
branch  0 never executed
branch  1 never executed
    #####:  906:            state->hand[currentPlayer][choice1]) {
    #####:  907:          discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  908:          break;
        -:  909:        }
        -:  910:      }
        -:  911:    }
        -:  912:
    #####:  913:    return 0;
        -:  914:
        -:  915:  case cutpurse:
        -:  916:
    #####:  917:    updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  918:    for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  919:      if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  920:        for (j = 0; j < state->handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####:  921:          if (state->hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####:  922:            discardCard(j, i, state, 0);
call    0 never executed
    #####:  923:            break;
        -:  924:          }
    #####:  925:          if (j == state->handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####:  926:            for (k = 0; k < state->handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -:  927:              if (DEBUG)
        -:  928:                printf("Player %d reveals card number %d\n", i,
        -:  929:                       state->hand[i][k]);
        -:  930:            }
    #####:  931:            break;
        -:  932:          }
        -:  933:        }
        -:  934:      }
        -:  935:    }
        -:  936:
        -:  937:    // discard played card from hand
    #####:  938:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  939:
    #####:  940:    return 0;
        -:  941:
        -:  942:  case embargo:
        -:  943:    //+2 Coins
    #####:  944:    state->coins = state->coins + 2;
        -:  945:
        -:  946:    // see if selected pile is in play
    #####:  947:    if (state->supplyCount[choice1] == -1) {
branch  0 never executed
branch  1 never executed
    #####:  948:      return -1;
        -:  949:    }
        -:  950:
        -:  951:    // add embargo token to selected supply pile
    #####:  952:    state->embargoTokens[choice1]++;
        -:  953:
        -:  954:    // trash card
    #####:  955:    discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  956:    return 0;
        -:  957:
        -:  958:  case outpost:
        -:  959:    // set outpost flag
        1:  960:    state->outpostPlayed++;
        -:  961:
        -:  962:    // discard card
        1:  963:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  964:    return 0;
        -:  965:
        -:  966:  case salvager:
        -:  967:    //+1 buy
    #####:  968:    state->numBuys++;
        -:  969:
    #####:  970:    if (choice1) {
branch  0 never executed
branch  1 never executed
        -:  971:      // gain coins equal to trashed card
    #####:  972:      state->coins = state->coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -:  973:      // trash card
    #####:  974:      discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -:  975:    }
        -:  976:
        -:  977:    // discard card
    #####:  978:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  979:    return 0;
        -:  980:
        -:  981:  case sea_hag:
    #####:  982:    for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  983:      if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  984:        state->discard[i][state->discardCount[i]] =
    #####:  985:            state->deck[i][state->deckCount[i]--];
    #####:  986:        state->deckCount[i]--;
    #####:  987:        state->discardCount[i]++;
    #####:  988:        state->deck[i][state->deckCount[i]--] = curse; // Top card now a curse
        -:  989:      }
        -:  990:    }
    #####:  991:    return 0;
        -:  992:
        -:  993:  case treasure_map:
        -:  994:    // search hand for another treasure_map
    #####:  995:    index = -1;
    #####:  996:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  997:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  998:        index = i;
    #####:  999:        break;
        -: 1000:      }
        -: 1001:    }
    #####: 1002:    if (index > -1) {
branch  0 never executed
branch  1 never executed
        -: 1003:      // trash both treasure cards
    #####: 1004:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1005:      discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1006:
        -: 1007:      // gain 4 Gold cards
    #####: 1008:      for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1009:        gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1010:      }
        -: 1011:
        -: 1012:      // return success
    #####: 1013:      return 1;
        -: 1014:    }
        -: 1015:
        -: 1016:    // no second treasure_map found in hand
    #####: 1017:    return -1;
        -: 1018:  }
        -: 1019:
    #####: 1020:  return -1;
        -: 1021:}
        -: 1022:
function adventurerCardEffect called 1 returned 100% blocks executed 67%
        1: 1023:int adventurerCardEffect(struct gameState *state, int currentPlayer) {
        1: 1024:  int drawntreasure = 0;
        -: 1025:  int cardDrawn;
        -: 1026:  int temphand[MAX_HAND];
        1: 1027:  int tempHandCounter = 0;
        -: 1028:
        4: 1029:  while (drawntreasure < 2) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1030:    // if the deck is empty we need to shuffle discard and add to deck
        2: 1031:    if (state->deckCount[currentPlayer] < 1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1032:      shuffle(currentPlayer, state);
call    0 never executed
        -: 1033:    }
        -: 1034:
        2: 1035:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1036:
        -: 1037:    // top card of hand is most recently drawn card.
        2: 1038:    cardDrawn = state->hand[currentPlayer][0];
        -: 1039:
        2: 1040:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        2: 1041:      drawntreasure++;
        -: 1042:    } else {
    #####: 1043:      temphand[tempHandCounter] = cardDrawn;
        -: 1044:      // this should just remove the top card (the most recently drawn one).
    #####: 1045:      state->handCount[currentPlayer]--;
    #####: 1046:      tempHandCounter++;
        -: 1047:    }
        -: 1048:  }
        2: 1049:  while (tempHandCounter - 1 >= 0) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -: 1050:    // discard all cards in play that have been drawn
    #####: 1051:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
    #####: 1052:        temphand[tempHandCounter - 1];
    #####: 1053:    tempHandCounter = tempHandCounter - 1;
        -: 1054:  }
        1: 1055:  return 0;
        -: 1056:}
        -: 1057:
function smithyCardEffect called 1 returned 100% blocks executed 100%
        1: 1058:int smithyCardEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1059:  //+3 Cards
        4: 1060:  for (int i = 0; i < 3; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3: 1061:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1062:  }
        -: 1063:
        -: 1064:  // discard card from hand
        1: 1065:  discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        -: 1066:
        1: 1067:  return 0;
        -: 1068:}
        -: 1069:
function villageCardEffect called 0 returned 0% blocks executed 0%
    #####: 1070:int villageCardEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1071:  //+1 Card
    #####: 1072:  drawCard(currentPlayer, state);
call    0 never executed
        -: 1073:
        -: 1074:  //+2 Actions
    #####: 1075:  state->numActions = state->numActions + 2;
        -: 1076:
        -: 1077:  // discard played card from hand
    #####: 1078:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1079:
    #####: 1080:  return 0;
        -: 1081:}
        -: 1082:
function feastCardEffect called 0 returned 0% blocks executed 0%
    #####: 1083:int feastCardEffect(struct gameState *state, int currentPlayer, int choice1) {
        -: 1084:  int temphand[MAX_HAND];
        -: 1085:
        -: 1086:  // gain card with cost up to 5
        -: 1087:  // Backup hand
    #####: 1088:  for (int i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1089:    temphand[i] = state->hand[currentPlayer][i]; // Backup card
    #####: 1090:    state->hand[currentPlayer][i] = -1;          // Set to nothing
        -: 1091:  }
        -: 1092:  // Backup hand
        -: 1093:
    #####: 1094:  int x = 1;       // Condition to loop on
    #####: 1095:  while (x == 1) { // Buy one card
branch  0 never executed
branch  1 never executed
        -: 1096:    // Update Coins for Buy
    #####: 1097:    updateCoins(currentPlayer, state, 5);
call    0 never executed
        -: 1098:
    #####: 1099:    if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1100:      if (DEBUG) {
        -: 1101:        printf("None of that card left, sorry!\n");
        -: 1102:      }
        -: 1103:      if (DEBUG) {
        -: 1104:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1105:      }
    #####: 1106:    } else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1107:      printf("That card is too expensive!\n");
call    0 never executed
        -: 1108:
        -: 1109:      if (DEBUG) {
        -: 1110:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1111:      }
        -: 1112:    } else {
        -: 1113:      if (DEBUG) {
        -: 1114:        printf("Deck Count: %d\n", state->handCount[currentPlayer] +
        -: 1115:                                       state->deckCount[currentPlayer] +
        -: 1116:                                       state->discardCount[currentPlayer]);
        -: 1117:      }
        -: 1118:
    #####: 1119:      gainCard(choice1, state, 0, currentPlayer); // Gain the card
call    0 never executed
    #####: 1120:      x = 0;                                      // No more buying cards
        -: 1121:
        -: 1122:      if (DEBUG) {
        -: 1123:        printf("Deck Count: %d\n", state->handCount[currentPlayer] +
        -: 1124:                                       state->deckCount[currentPlayer] +
        -: 1125:                                       state->discardCount[currentPlayer]);
        -: 1126:      }
        -: 1127:    }
        -: 1128:  }
        -: 1129:
        -: 1130:  // Reset Hand
    #####: 1131:  for (int i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1132:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1133:    temphand[i] = -1;
        -: 1134:  }
        -: 1135:  // Reset Hand
        -: 1136:
    #####: 1137:  return 0;
        -: 1138:}
        -: 1139:
function tributeCardEffect called 0 returned 0% blocks executed 0%
    #####: 1140:int tributeCardEffect(struct gameState *state, int currentPlayer) {
    #####: 1141:  int tributeRevealedCards[2] = {-1, -1};
    #####: 1142:  int nextPlayer = currentPlayer + 1;
    #####: 1143:  if (nextPlayer > (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####: 1144:    nextPlayer = 0;
        -: 1145:  }
        -: 1146:
    #####: 1147:  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####: 1148:    if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1149:      tributeRevealedCards[0] =
    #####: 1150:          state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1151:      state->deckCount[nextPlayer]--;
    #####: 1152:    } else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1153:      tributeRevealedCards[0] =
    #####: 1154:          state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1155:      state->discardCount[nextPlayer]--;
        -: 1156:    } else {
        -: 1157:      // No Card to Reveal
        -: 1158:      if (DEBUG) {
        -: 1159:        printf("No cards to reveal\n");
        -: 1160:      }
        -: 1161:    }
        -: 1162:  } else {
    #####: 1163:    if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####: 1164:      for (int i = state->deckCount[nextPlayer]; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1165:        state->deck[nextPlayer][i] =
    #####: 1166:            state->discard[nextPlayer][i]; // Move to deck
    #####: 1167:        state->deckCount[nextPlayer]++;
    #####: 1168:        state->discard[nextPlayer][i] = -1;
    #####: 1169:        state->discardCount[nextPlayer]--;
        -: 1170:      }
        -: 1171:
    #####: 1172:      shuffle(nextPlayer, state); // Shuffle the deck
call    0 never executed
        -: 1173:    }
        -: 1174:
    #####: 1175:    tributeRevealedCards[0] =
    #####: 1176:        state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1177:    state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1178:    state->deckCount[nextPlayer]--;
    #####: 1179:    tributeRevealedCards[1] =
    #####: 1180:        state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1181:    state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1182:    state->deckCount[nextPlayer]--;
        -: 1183:  }
        -: 1184:
        -: 1185:  // If we have a duplicate card, just drop one
    #####: 1186:  if (tributeRevealedCards[0] == tributeRevealedCards[1]) {
branch  0 never executed
branch  1 never executed
    #####: 1187:    state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1188:    state->playedCardCount++;
    #####: 1189:    tributeRevealedCards[1] = -1;
        -: 1190:  }
        -: 1191:
    #####: 1192:  for (int i = 0; i <= 2; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1193:    if (tributeRevealedCards[i] == copper ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1194:        tributeRevealedCards[i] == silver ||
branch  0 never executed
branch  1 never executed
    #####: 1195:        tributeRevealedCards[i] == gold) { // Treasure cards
    #####: 1196:      state->coins += 2;
    #####: 1197:    } else if (tributeRevealedCards[i] == estate ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1198:               tributeRevealedCards[i] == duchy ||
branch  0 never executed
branch  1 never executed
    #####: 1199:               tributeRevealedCards[i] == province ||
branch  0 never executed
branch  1 never executed
    #####: 1200:               tributeRevealedCards[i] == gardens ||
branch  0 never executed
branch  1 never executed
    #####: 1201:               tributeRevealedCards[i] == great_hall) { // Victory Card Found
    #####: 1202:      drawCard(currentPlayer, state);
call    0 never executed
    #####: 1203:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1204:    } else { // Action Card
    #####: 1205:      state->numActions = state->numActions + 2;
        -: 1206:    }
        -: 1207:  }
        -: 1208:
    #####: 1209:  return 0;
        -: 1210:}
        -: 1211:
function discardCard called 3 returned 100% blocks executed 78%
        3: 1212:int discardCard(int handPos, int currentPlayer, struct gameState *state,
        -: 1213:                int trashFlag) {
        -: 1214:
        -: 1215:  // if card is not trashed, added to Played pile
        3: 1216:  if (trashFlag < 1) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1217:    // add card to played pile
        4: 1218:    state->playedCards[state->playedCardCount] =
        2: 1219:        state->hand[currentPlayer][handPos];
        2: 1220:    state->playedCardCount++;
        -: 1221:  }
        -: 1222:
        -: 1223:  // set played card to -1
        3: 1224:  state->hand[currentPlayer][handPos] = -1;
        -: 1225:
        -: 1226:  // remove card from player's hand
        3: 1227:  if (handPos == (state->handCount[currentPlayer] -
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1228:                  1)) // last card in hand array is played
        -: 1229:  {
        -: 1230:    // reduce number of cards in hand
    #####: 1231:    state->handCount[currentPlayer]--;
        3: 1232:  } else if (state->handCount[currentPlayer] == 1) // only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1233:  {
        -: 1234:    // reduce number of cards in hand
    #####: 1235:    state->handCount[currentPlayer]--;
        -: 1236:  } else {
        -: 1237:    // replace discarded card with last card in hand
        3: 1238:    state->hand[currentPlayer][handPos] =
        3: 1239:        state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1240:    // set last card to -1
        3: 1241:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1242:    // reduce number of cards in hand
        3: 1243:    state->handCount[currentPlayer]--;
        -: 1244:  }
        -: 1245:
        3: 1246:  return 0;
        -: 1247:}
        -: 1248:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1249:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player) {
        -: 1250:  // Note: supplyPos is enum of choosen card
        -: 1251:
        -: 1252:  // check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1253:  if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1254:    return -1;
        -: 1255:  }
        -: 1256:
        -: 1257:  // added card for [whoseTurn] current player:
        -: 1258:  // toFlag = 0 : add to discard
        -: 1259:  // toFlag = 1 : add to deck
        -: 1260:  // toFlag = 2 : add to hand
        -: 1261:
    #####: 1262:  if (toFlag == 1) {
branch  0 never executed
branch  1 never executed
    #####: 1263:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1264:    state->deckCount[player]++;
    #####: 1265:  } else if (toFlag == 2) {
branch  0 never executed
branch  1 never executed
    #####: 1266:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1267:    state->handCount[player]++;
        -: 1268:  } else {
    #####: 1269:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1270:    state->discardCount[player]++;
        -: 1271:  }
        -: 1272:
        -: 1273:  // decrease number in supply pile
    #####: 1274:  state->supplyCount[supplyPos]--;
        -: 1275:
    #####: 1276:  return 0;
        -: 1277:}
        -: 1278:
function updateCoins called 7 returned 100% blocks executed 82%
        7: 1279:int updateCoins(int player, struct gameState *state, int bonus) {
        -: 1280:  int i;
        -: 1281:
        -: 1282:  // reset coin count
        7: 1283:  state->coins = 0;
        -: 1284:
        -: 1285:  // add coins for each Treasure card in player's hand
       42: 1286:  for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       35: 1287:    if (state->hand[player][i] == copper) {
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       28: 1288:      state->coins += 1;
        7: 1289:    } else if (state->hand[player][i] == silver) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1290:      state->coins += 2;
        7: 1291:    } else if (state->hand[player][i] == gold) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1292:      state->coins += 3;
        -: 1293:    }
        -: 1294:  }
        -: 1295:
        -: 1296:  // add bonus
        7: 1297:  state->coins += bonus;
        -: 1298:
        7: 1299:  return 0;
        -: 1300:}
        -: 1301:
        -: 1302:// end of dominion.c
