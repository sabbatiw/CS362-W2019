------------------------------------------------------------------------------
[33mbegin numHandCards() testing
[0m------------------------------------------------------------------------------
[ [32mpassed[0m ] test 1 (p1 initial): expected = 5, actual = 5
[ [32mpassed[0m ] test 2 (p1 INT_MAX): expected = 2147483647, actual = 2147483647
[ [32mpassed[0m ] test 3 (p2 INT_MIN): expected = -2147483648, actual = -2147483648
[ [32mpassed[0m ] test 4 (p2 zero): expected = 0, actual = 0
------------------------------------------------------------------------------
numHandCards() tests: 4 of 4 completed.
                      4 of 4 successful.
------------------------------------------------------------------------------
------------------------------------------------------------------------------
[33mbegin whoseTurn() testing
[0m------------------------------------------------------------------------------
[ [32mpassed[0m ] test 1 (player 1): expected = 0, actual = 0
[ [32mpassed[0m ] test 2 (player 2): expected = 1, actual = 1
[ [32mpassed[0m ] test 3 (player 3): expected = 2, actual = 2
[ [32mpassed[0m ] test 4 (player 4): expected = 3, actual = 3
------------------------------------------------------------------------------
whoseTurn() tests: 4 of 4 completed.
                   4 of 4 successful.
------------------------------------------------------------------------------
------------------------------------------------------------------------------
[33mbegin isGameOver() testing
[0m------------------------------------------------------------------------------
[ [32mpassed[0m ] test 1 (initial): expected = 0, actual = 0
[ [32mpassed[0m ] test 2 (no province): expected = 1, actual = 1
[ [32mpassed[0m ] test 3 (2 empty piles): expected = 0, actual = 0
[ [32mpassed[0m ] test 4 (3 empty piles): expected = 1, actual = 1
[ [31mfailed[0m ] test 5 (3 empty piles): expected = 1, actual = 0
------------------------------------------------------------------------------
isGameOver() tests: 5 of 5 completed.
                    4 of 5 successful.
------------------------------------------------------------------------------
------------------------------------------------------------------------------
[33mbegin getCost() testing
[0m------------------------------------------------------------------------------
[ [32mpassed[0m ] test 1 (curse): expected = 0, actual = 0
[ [32mpassed[0m ] test 2 (estate): expected = 2, actual = 2
[ [32mpassed[0m ] test 3 (duchy): expected = 5, actual = 5
[ [32mpassed[0m ] test 4 (province): expected = 8, actual = 8
[ [32mpassed[0m ] test 5 (copper): expected = 0, actual = 0
[ [32mpassed[0m ] test 6 (silver): expected = 3, actual = 3
[ [32mpassed[0m ] test 7 (gold): expected = 6, actual = 6
[ [32mpassed[0m ] test 8 (adventurer): expected = 6, actual = 6
[ [32mpassed[0m ] test 9 (council_room): expected = 5, actual = 5
[ [32mpassed[0m ] test 10 (feast): expected = 4, actual = 4
[ [32mpassed[0m ] test 11 (gardens): expected = 4, actual = 4
[ [32mpassed[0m ] test 12 (mine): expected = 5, actual = 5
[ [32mpassed[0m ] test 13 (remodel): expected = 4, actual = 4
[ [32mpassed[0m ] test 14 (smithy): expected = 4, actual = 4
[ [32mpassed[0m ] test 15 (village): expected = 3, actual = 3
[ [32mpassed[0m ] test 16 (baron): expected = 4, actual = 4
[ [32mpassed[0m ] test 17 (great_hall): expected = 3, actual = 3
[ [32mpassed[0m ] test 18 (minion): expected = 5, actual = 5
[ [32mpassed[0m ] test 19 (steward): expected = 3, actual = 3
[ [32mpassed[0m ] test 20 (tribute): expected = 5, actual = 5
[ [32mpassed[0m ] test 21 (ambassador): expected = 3, actual = 3
[ [32mpassed[0m ] test 22 (cutpurse): expected = 4, actual = 4
[ [32mpassed[0m ] test 23 (embargo): expected = 2, actual = 2
[ [32mpassed[0m ] test 24 (outpost): expected = 5, actual = 5
[ [32mpassed[0m ] test 25 (salvager): expected = 4, actual = 4
[ [32mpassed[0m ] test 26 (sea_hag): expected = 4, actual = 4
[ [32mpassed[0m ] test 27 (treasure_map): expected = 4, actual = 4
[ [32mpassed[0m ] test 28 (invalid card): expected = -1, actual = -1
------------------------------------------------------------------------------
getCost() tests: 28 of 4 completed.
                 28 of 4 successful.
------------------------------------------------------------------------------
------------------------------------------------------------------------------
[33mbegin smithy testing
[0m------------------------------------------------------------------------------
[ [32mpassed[0m ] smithy test 1 (p1 hand size): expected = 7, actual = 7
[ [32mpassed[0m ] smithy test 2 (p1 deck size): expected = 2, actual = 2
[ [32mpassed[0m ] smithy test 3 (p1 discards): expected = 0, actual = 0
[ [32mpassed[0m ] smithy test 4 (p2 hand size): expected = 0, actual = 0
[ [32mpassed[0m ] smithy test 5 (p2 deck size): expected = 10, actual = 10
[ [32mpassed[0m ] smithy test 6 (p2 discards): expected = 0, actual = 0
[ [32mpassed[0m ] smithy test 7 (cards played): expected = 1, actual = 1
[ [32mpassed[0m ] smithy test 8 (victory cards): expected = 24, actual = 24
[ [32mpassed[0m ] smithy test 9 (kingdom cards): expected = 98, actual = 98
------------------------------------------------------------------------------
smithy tests: 9 of 9 completed.
              9 of 9 successful.
------------------------------------------------------------------------------
------------------------------------------------------------------------------
[33mbegin adventurer testing
[0m------------------------------------------------------------------------------
[ [32mpassed[0m ] adventurer test 1 (p1 hand size): expected = 7, actual = 7
[ [31mfailed[0m ] adventurer test 2 (p1 deck size): expected = 1, actual = 2
[ [31mfailed[0m ] adventurer test 3 (p1 discards): expected = 1, actual = 2
[ [32mpassed[0m ] adventurer test 4 (p1 treasure count): expected = 5, actual = 5
[ [32mpassed[0m ] adventurer test 5 (p2 hand size): expected = 0, actual = 0
[ [32mpassed[0m ] adventurer test 6 (p2 deck size): expected = 10, actual = 10
[ [32mpassed[0m ] adventurer test 7 (p2 discards): expected = 0, actual = 0
[ [32mpassed[0m ] adventurer test 8 (cards played): expected = 0, actual = 0
[ [32mpassed[0m ] adventurer test 9 (victory cards): expected = 24, actual = 24
[ [32mpassed[0m ] adventurer test 10 (kingdom cards): expected = 98, actual = 98
------------------------------------------------------------------------------
adventurer tests: 10 of 10 completed.
                  8 of 10 successful.
------------------------------------------------------------------------------
------------------------------------------------------------------------------
[33mbegin great_hall testing
[0m------------------------------------------------------------------------------
[ [32mpassed[0m ] great_hall test 1 (p1 hand size): expected = 5, actual = 5
[ [32mpassed[0m ] great_hall test 2 (p1 deck size): expected = 4, actual = 4
[ [32mpassed[0m ] great_hall test 3 (p1 discards): expected = 0, actual = 0
[ [32mpassed[0m ] great_hall test 4 (p2 hand size): expected = 0, actual = 0
[ [32mpassed[0m ] great_hall test 5 (p2 deck size): expected = 10, actual = 10
[ [32mpassed[0m ] great_hall test 6 (p2 discards): expected = 0, actual = 0
[ [32mpassed[0m ] great_hall test 7 (cards played): expected = 1, actual = 1
[ [32mpassed[0m ] great_hall test 8 (victory cards): expected = 24, actual = 24
[ [32mpassed[0m ] great_hall test 9 (kingdom cards): expected = 96, actual = 96
------------------------------------------------------------------------------
great_hall tests: 9 of 9 completed.
                  9 of 9 successful.
------------------------------------------------------------------------------
------------------------------------------------------------------------------
[33mbegin outpost testing
[0m------------------------------------------------------------------------------
[ [32mpassed[0m ] outpost test 1 (outpost flag): expected = 1, actual = 1
[ [32mpassed[0m ] outpost test 2 (p1 hand size): expected = 4, actual = 4
[ [32mpassed[0m ] outpost test 3 (p1 deck size): expected = 5, actual = 5
[ [32mpassed[0m ] outpost test 4 (p1 discards): expected = 0, actual = 0
[ [32mpassed[0m ] outpost test 5 (p2 hand size): expected = 0, actual = 0
[ [32mpassed[0m ] outpost test 6 (p2 deck size): expected = 10, actual = 10
[ [32mpassed[0m ] outpost test 7 (p2 discards): expected = 0, actual = 0
[ [32mpassed[0m ] outpost test 8 (cards played): expected = 1, actual = 1
[ [32mpassed[0m ] outpost test 9 (victory cards): expected = 24, actual = 24
[ [32mpassed[0m ] outpost test 10 (kingdom cards): expected = 96, actual = 96
------------------------------------------------------------------------------
outpost tests: 10 of 10 completed.
               10 of 10 successful.
------------------------------------------------------------------------------
---------------------------------------
my 4 functions coverage
---------------------------------------
Function 'numHandCards'
Lines executed:100.00% of 2
Function 'whoseTurn'
Lines executed:100.00% of 2
Function 'isGameOver'
Lines executed:100.00% of 10
Function 'getCost'
Lines executed:100.00% of 30
---------------------------------------
---------------------------------------
complete gcov results
---------------------------------------
File 'dominion.c'
Lines executed:34.27% of 569
Branches executed:35.25% of 417
Taken at least once:27.10% of 417
Calls executed:20.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 270 returned 100% blocks executed 83%
      270:    8:int compare(const void* a, const void* b) {
      270:    9:    if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:        return 1;
      270:   11:    if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       72:   12:        return -1;
      198:   13:    return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:        int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
function initializeGame called 7 returned 100% blocks executed 94%
        7:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:        struct gameState *state) {
        -:   39:
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;			
        -:   43:    //set up random number generator
        7:   44:    SelectStream(1);
call    0 returned 100%
        7:   45:    PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:    //check number of players
        7:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
        7:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
       77:   57:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      770:   59:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      700:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
        7:   73:    if (numPlayers == 2)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -:   74:    {
        5:   75:        state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:    else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
        2:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
        7:   87:    if (numPlayers == 2)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -:   88:    {
        5:   89:        state->supplyCount[estate] = 8;
        5:   90:        state->supplyCount[duchy] = 8;
        5:   91:        state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
        2:   95:        state->supplyCount[estate] = 12;
        2:   96:        state->supplyCount[duchy] = 12;
        2:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
        7:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:  102:    state->supplyCount[silver] = 40;
        7:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
      147:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1155:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:        {
     1085:  110:            if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
       70:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:                {
       18:  115:                    if (numPlayers == 2){ 
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
        7:  116:                        state->supplyCount[i] = 8; 
        -:  117:                    }
        2:  118:                    else{ state->supplyCount[i] = 12; }
        -:  119:                }
        -:  120:                else
        -:  121:                {
       61:  122:                    state->supplyCount[i] = 10;
        -:  123:                }
       70:  124:                break;
        -:  125:            }
        -:  126:            else    //card is not in the set choosen for the game
        -:  127:            {
     1015:  128:                state->supplyCount[i] = -1;
        -:  129:            }
        -:  130:        }
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:    ////////////////////////
        -:  135:    //supply intilization complete
        -:  136:
        -:  137:    //set player decks
       25:  138:    for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  139:    {
       18:  140:        state->deckCount[i] = 0;
       72:  141:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:        {
       54:  143:            state->deck[i][j] = estate;
       54:  144:            state->deckCount[i]++;
        -:  145:        }
      144:  146:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:        {
      126:  148:            state->deck[i][j] = copper;
      126:  149:            state->deckCount[i]++;		
        -:  150:        }
        -:  151:    }
        -:  152:
        -:  153:    //shuffle player decks
       25:  154:    for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  155:    {
       18:  156:        if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:        {
    #####:  158:            return -1;
        -:  159:        }
        -:  160:    }
        -:  161:
        -:  162:    //draw player hands
       25:  163:    for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  164:    {  
        -:  165:        //initialize hand size to zero
       18:  166:        state->handCount[i] = 0;
       18:  167:        state->discardCount[i] = 0;
        -:  168:        //draw 5 cards
        -:  169:        // for (j = 0; j < 5; j++)
        -:  170:        //	{
        -:  171:        //	  drawCard(i, state);
        -:  172:        //	}
        -:  173:    }
        -:  174:
        -:  175:    //set embargo tokens to 0 for all supply piles
      196:  176:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      189:  178:        state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:    //initialize first player's turn
        7:  182:    state->outpostPlayed = 0;
        7:  183:    state->phase = 0;
        7:  184:    state->numActions = 1;
        7:  185:    state->numBuys = 1;
        7:  186:    state->playedCardCount = 0;
        7:  187:    state->whoseTurn = 0;
        7:  188:    state->handCount[state->whoseTurn] = 0;
        -:  189:    //int it; move to top
        -:  190:
        -:  191:    //Moved draw cards to here, only drawing at the start of a turn
       42:  192:    for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       35:  193:        drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:    }
        -:  195:
        7:  196:    updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        7:  198:    return 0;
        -:  199:}
        -:  200:
function shuffle called 18 returned 100% blocks executed 94%
       18:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:    int newDeck[MAX_DECK];
       18:  205:    int newDeckPos = 0;
        -:  206:    int card;
        -:  207:    int i;
        -:  208:
       18:  209:    if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:        return -1;
       18:  211:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      216:  214:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      180:  215:        card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      180:  216:        newDeck[newDeckPos] = state->deck[player][card];
      180:  217:        newDeckPos++;
      610:  218:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
      430:  219:            state->deck[player][i] = state->deck[player][i+1];
        -:  220:        }
      180:  221:        state->deckCount[player]--;
        -:  222:    }
      198:  223:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      180:  224:        state->deck[player][i] = newDeck[i];
      180:  225:        state->deckCount[player]++;
        -:  226:    }
        -:  227:
       18:  228:    return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:    int card;
    #####:  234:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:    //check if it is the right phase
    #####:  237:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:        return -1;
        -:  240:    }
        -:  241:
        -:  242:    //check if player has enough actions
    #####:  243:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:        return -1;
        -:  246:    }
        -:  247:
        -:  248:    //get card played
    #####:  249:    card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:    //check if selected card is an action
    #####:  252:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:        return -1;
        -:  255:    }
        -:  256:
        -:  257:    //play card
    #####:  258:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:        return -1;
        -:  261:    }
        -:  262:
        -:  263:    //reduce number of actions
    #####:  264:    state->numActions--;
        -:  265:
        -:  266:    //update coins (Treasure cards may be added with card draws)
    #####:  267:    updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:    return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:    int who;
        -:  274:    if (DEBUG){
        -:  275:        printf("Entering buyCard...\n");
        -:  276:    }
        -:  277:
        -:  278:    // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:    who = state->whoseTurn;
        -:  281:
    #####:  282:    if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:        if (DEBUG)
        -:  284:            printf("You do not have any buys left\n");
    #####:  285:        return -1;
    #####:  286:    } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:        if (DEBUG)
        -:  288:            printf("There are not any of that type of card left\n");
    #####:  289:        return -1;
    #####:  290:    } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:        if (DEBUG) 
        -:  292:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:        return -1;
        -:  294:    } else {
    #####:  295:        state->phase=1;
        -:  296:        //state->supplyCount[supplyPos]--;
    #####:  297:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:        state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:        state->numBuys--;
        -:  301:        if (DEBUG)
        -:  302:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:    }
        -:  304:
        -:  305:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:    //state->discardCount[who]++;
        -:  307:
    #####:  308:    return 0;
        -:  309:}
        -:  310:
function numHandCards called 4 returned 100% blocks executed 100%
        4:  311:int numHandCards(struct gameState *state) {
        4:  312:    return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 12 returned 100% blocks executed 100%
       12:  315:int handCard(int handPos, struct gameState *state) {
       12:  316:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
       12:  317:    return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:    return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:    int i;
    #####:  326:    int count = 0;
        -:  327:
    #####:  328:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:    return count;
        -:  344:}
        -:  345:
function whoseTurn called 26 returned 100% blocks executed 100%
       26:  346:int whoseTurn(struct gameState *state) {
       26:  347:    return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:    int k;
        -:  352:    int i;
    #####:  353:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:    //Discard hand
    #####:  356:    for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:    }
    #####:  360:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:    //Code for determining the player
    #####:  363:    if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:    }
        -:  366:    else{
    #####:  367:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:    }
        -:  369:
    #####:  370:    state->outpostPlayed = 0;
    #####:  371:    state->phase = 0;
    #####:  372:    state->numActions = 1;
    #####:  373:    state->coins = 0;
    #####:  374:    state->numBuys = 1;
    #####:  375:    state->playedCardCount = 0;
    #####:  376:    state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:    //int k; move to top
        -:  379:    //Next player draws hand
    #####:  380:    for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:        drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:    }
        -:  383:
        -:  384:    //Update money
    #####:  385:    updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:    return 0;
        -:  388:}
        -:  389:
function isGameOver called 5 returned 100% blocks executed 100%
        5:  390:int isGameOver(struct gameState *state) {
        -:  391:    int i;
        -:  392:    int j;
        -:  393:
        -:  394:    //if stack of Province cards is empty, the game ends
        5:  395:    if (state->supplyCount[province] == 0)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  396:    {
        1:  397:        return 1;
        -:  398:    }
        -:  399:
        -:  400:    //if three supply pile are at 0, the game ends
        4:  401:    j = 0;
      104:  402:    for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      100:  404:        if (state->supplyCount[i] == 0)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  405:        {
        7:  406:            j++;
        -:  407:        }
        -:  408:    }
        4:  409:    if ( j >= 3)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  410:    {
        1:  411:        return 1;
        -:  412:    }
        -:  413:
        3:  414:    return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:    int i;
    #####:  420:    int score = 0;
        -:  421:    //score from hand
    #####:  422:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:        if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:        if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:        if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:        if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:        if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:    //score from discard
    #####:  433:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:        if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:        if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:        if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:        if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:        if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:    //score from deck
    #####:  444:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:        if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:        if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:        if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:        if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:        if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:    return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:    int i;	
        -:  459:    int j;
        -:  460:    int highScore;
        -:  461:    int currentPlayer;
        -:  462:
        -:  463:    //get score for each player
    #####:  464:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:        //set unused player scores to -9999
    #####:  467:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:        {
    #####:  469:            players[i] = -9999;
        -:  470:        }
        -:  471:        else
        -:  472:        {
    #####:  473:            players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:        }
        -:  475:    }
        -:  476:
        -:  477:    //find highest score
    #####:  478:    j = 0;
    #####:  479:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:        {
    #####:  483:            j = i;
        -:  484:        }
        -:  485:    }
    #####:  486:    highScore = players[j];
        -:  487:
        -:  488:    //add 1 to players who had less turns
    #####:  489:    currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:        {
    #####:  494:            players[i]++;
        -:  495:        }
        -:  496:    }
        -:  497:
        -:  498:    //find new highest score
    #####:  499:    j = 0;
    #####:  500:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:        {
    #####:  504:            j = i;
        -:  505:        }
        -:  506:    }
    #####:  507:    highScore = players[j];
        -:  508:
        -:  509:    //set winners in array to 1 and rest to 0
    #####:  510:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:        {
    #####:  514:            players[i] = 1;
        -:  515:        }
        -:  516:        else
        -:  517:        {
    #####:  518:            players[i] = 0;
        -:  519:        }
        -:  520:    }
        -:  521:
    #####:  522:    return 0;
        -:  523:}
        -:  524:
function drawCard called 42 returned 100% blocks executed 38%
       42:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:    int deckCounter;
       42:  528:    if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:
        -:  530:        //Step 1 Shuffle the discard pile back into a deck
        -:  531:        int i;
        -:  532:        //Move discard to deck
    #####:  533:        for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:            state->deck[player][i] = state->discard[player][i];
    #####:  535:            state->discard[player][i] = -1;
        -:  536:        }
        -:  537:
    #####:  538:        state->deckCount[player] = state->discardCount[player];
    #####:  539:        state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:        //Shufffle the deck
    #####:  542:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:
        -:  544:        if (DEBUG){//Debug statements
        -:  545:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:        }
        -:  547:
    #####:  548:        state->discardCount[player] = 0;
        -:  549:
        -:  550:        //Step 2 Draw Card
    #####:  551:        count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:        if (DEBUG){//Debug statements
        -:  554:            printf("Current hand count: %d\n", count);
        -:  555:        }
        -:  556:
    #####:  557:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:        if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:            return -1;
        -:  561:
    #####:  562:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:        state->deckCount[player]--;
    #####:  564:        state->handCount[player]++;//Increment hand count
        -:  565:    }
        -:  566:
        -:  567:    else{
       42:  568:        int count = state->handCount[player];//Get current hand count for player
        -:  569:        int deckCounter;
        -:  570:        if (DEBUG){//Debug statements
        -:  571:            printf("Current hand count: %d\n", count);
        -:  572:        }
        -:  573:
       42:  574:        deckCounter = state->deckCount[player];//Create holder for the deck count
       42:  575:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       42:  576:        state->deckCount[player]--;
       42:  577:        state->handCount[player]++;//Increment hand count
        -:  578:    }
        -:  579:
       42:  580:    return 0;
        -:  581:}
        -:  582:
function getCost called 28 returned 100% blocks executed 100%
       28:  583:int getCost(int cardNumber)
        -:  584:{
       28:  585:    switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 4%
        -:  586:    {
        -:  587:        case curse:
        1:  588:            return 0;
        -:  589:        case estate:
        1:  590:            return 2;
        -:  591:        case duchy:
        1:  592:            return 5;
        -:  593:        case province:
        1:  594:            return 8;
        -:  595:        case copper:
        1:  596:            return 0;
        -:  597:        case silver:
        1:  598:            return 3;
        -:  599:        case gold:
        1:  600:            return 6;
        -:  601:        case adventurer:
        1:  602:            return 6;
        -:  603:        case council_room:
        1:  604:            return 5;
        -:  605:        case feast:
        1:  606:            return 4;
        -:  607:        case gardens:
        1:  608:            return 4;
        -:  609:        case mine:
        1:  610:            return 5;
        -:  611:        case remodel:
        1:  612:            return 4;
        -:  613:        case smithy:
        1:  614:            return 4;
        -:  615:        case village:
        1:  616:            return 3;
        -:  617:        case baron:
        1:  618:            return 4;
        -:  619:        case great_hall:
        1:  620:            return 3;
        -:  621:        case minion:
        1:  622:            return 5;
        -:  623:        case steward:
        1:  624:            return 3;
        -:  625:        case tribute:
        1:  626:            return 5;
        -:  627:        case ambassador:
        1:  628:            return 3;
        -:  629:        case cutpurse:
        1:  630:            return 4;
        -:  631:        case embargo: 
        1:  632:            return 2;
        -:  633:        case outpost:
        1:  634:            return 5;
        -:  635:        case salvager:
        1:  636:            return 4;
        -:  637:        case sea_hag:
        1:  638:            return 4;
        -:  639:        case treasure_map:
        1:  640:            return 4;
        -:  641:    }
        -:  642:
        1:  643:    return -1;
        -:  644:}
        -:  645:
        -:  646:/**
        -:  647: * function: play_adventurer
        -:  648: * -------------------------
        -:  649: * description: implements the effect of the adventurer card
        -:  650: * card effect: player can look at his cards (in order) until 2 treasure cards
        -:  651: *              are found.
        -:  652: */
        -:  653:
function play_adventurer called 1 returned 100% blocks executed 93%
        1:  654:void play_adventurer(struct gameState *state)
        -:  655:{
        -:  656:    int cardDrawn;
        1:  657:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        1:  658:    int drawntreasure = 0;
        -:  659:    int temphand[MAX_HAND];
        -:  660:    //int z = 0;
        1:  661:    int z = 1;  // this off by one error was created for assignment-2
        -:  662:
        5:  663:    while (drawntreasure < 2)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  664:    {
        -:  665:        // if the deck is empty we need to shuffle discard and add to deck
        3:  666:        if (state->deckCount[currentPlayer] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  667:        {
    #####:  668:            shuffle(currentPlayer, state);
call    0 never executed
        -:  669:        }
        -:  670:        
        3:  671:        drawCard(currentPlayer, state);
call    0 returned 100%
        -:  672:        
        -:  673:        // top card of hand is most recently drawn card.
        3:  674:        cardDrawn = 
        3:  675:            state->hand[currentPlayer][state->handCount[currentPlayer] - 1];
        -:  676:        
        3:  677:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        2:  678:            drawntreasure++;
        -:  679:        else
        -:  680:        {
        1:  681:            temphand[z] = cardDrawn;
        -:  682:            
        -:  683:            // this should remove the top card (the most recently drawn one).
        1:  684:            state->handCount[currentPlayer]--;
        1:  685:            z++;
        -:  686:        }
        -:  687:    }
        -:  688:    
        4:  689:    while (z - 1 >= 0)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  690:    {
        -:  691:        // discard all cards in play that have been drawn
        4:  692:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = 
        2:  693:            temphand[z - 1];
        2:  694:        z = z - 1;
        -:  695:    }
        1:  696:}
        -:  697:
        -:  698:/**
        -:  699: * function: play_council_room
        -:  700: * ---------------------------
        -:  701: * description: implements the effect of the council room card
        -:  702: * card effect: draw 4 more cards, gain 1 buy, force opponents to draw 1 card
        -:  703: */
        -:  704:
function play_council_room called 0 returned 0% blocks executed 0%
    #####:  705:void play_council_room(struct gameState *state, int handPos)
        -:  706:{
    #####:  707:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  708:    int i;
        -:  709:
        -:  710:    // +4 Cards
    #####:  711:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  712:    {
    #####:  713:        drawCard(currentPlayer, state);
call    0 never executed
        -:  714:    }
        -:  715:
        -:  716:    // +1 Buy
    #####:  717:    state->numBuys++;
        -:  718:
        -:  719:    // Each other player draws a card
        -:  720:    // for (i = 0; i < state->numPlayers; i++)
    #####:  721:    for (i = 0; i <= state->numPlayers; i++) // implented for assignment-2
branch  0 never executed
branch  1 never executed
        -:  722:    {
    #####:  723:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  724:        {
    #####:  725:            drawCard(i, state);
call    0 never executed
        -:  726:        }
        -:  727:    }
        -:  728:
        -:  729:    //put played card in played card pile
    #####:  730:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  731:}
        -:  732:
        -:  733:/**
        -:  734: * function: play_remodel
        -:  735: * ----------------------
        -:  736: * description: implements the effect of the remodel card
        -:  737: * card effect: trash 1 card from your hand and gain a card costing up to 2 more
        -:  738: *              gold than it
        -:  739: */
        -:  740:
function play_remodel called 0 returned 0% blocks executed 0%
    #####:  741:int play_remodel(struct gameState *state, int handPos, int choice1, 
        -:  742:                  int choice2)
        -:  743:{
    #####:  744:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  745:    int i;
        -:  746:    int j;
        -:  747:
        -:  748:    // store card we will trash
    #####:  749:    j = state->hand[currentPlayer][choice1];
        -:  750:
    #####:  751:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  752:    {
    #####:  753:        return -1;
        -:  754:    }
        -:  755:
    #####:  756:    gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  757:
        -:  758:    //discard card from hand
    #####:  759:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  760:
        -:  761:    //discard trashed card
    #####:  762:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  763:    {
        -:  764:        // if (state->hand[currentPlayer][i] == j)
    #####:  765:        if (state->hand[currentPlayer][i] = j) // implemented  for assignment-2
branch  0 never executed
branch  1 never executed
        -:  766:        {
    #####:  767:            discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  768:            break;
        -:  769:        }
        -:  770:    }
        -:  771:
    #####:  772:    return 0;
        -:  773:}
        -:  774:
        -:  775:/**
        -:  776: * function: play_smithy
        -:  777: * ---------------------
        -:  778: * description: implements the effect of the smithy card
        -:  779: * card effect: draw 3 more cards
        -:  780: */
        -:  781:
function play_smithy called 1 returned 100% blocks executed 100%
        1:  782:void play_smithy(struct gameState *state, int handPos)
        -:  783:{
        1:  784:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  785:    int i;
        -:  786:    
        -:  787:    //+3 Cards
        4:  788:    for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  789:    {
        3:  790:        drawCard(currentPlayer, state);
call    0 returned 100%
        -:  791:    }
        -:  792:    
        -:  793:    //discard card from hand
        -:  794:    // discardCard(handPos, currentPlayer, state, 0);
        1:  795:    discardCard(currentPlayer, handPos, state, 0);
call    0 returned 100%
        1:  796:}
        -:  797:
        -:  798:/**
        -:  799: * function: play_village
        -:  800: * ----------------
        -:  801: * description: implements the effect of the village card
        -:  802: * card effect: draw 1 card and gain 2 actions
        -:  803: */
        -:  804:
function play_village called 0 returned 0% blocks executed 0%
    #####:  805:void play_village(struct gameState *state, int handPos)
        -:  806:{
    #####:  807:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  808:
        -:  809:    //+1 Card
    #####:  810:    drawCard(currentPlayer, state);
call    0 never executed
        -:  811:
        -:  812:    //+2 Actions
    #####:  813:    state->numActions = state->numActions + 2;
        -:  814:
        -:  815:    //discard played card from hand
    #####:  816:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  817:}
        -:  818:
function cardEffect called 4 returned 100% blocks executed 6%
        4:  819:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  820:{
        -:  821:    int i;
        -:  822:    int j;
        -:  823:    int k;
        -:  824:    int x;
        -:  825:    int index;
        4:  826:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  827:    int nextPlayer = currentPlayer + 1;
        -:  828:
        4:  829:    int tributeRevealedCards[2] = {-1, -1};
        -:  830:    int temphand[MAX_HAND];// moved above the if statement
        -:  831:    
        4:  832:    if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  833:        nextPlayer = 0;
        -:  834:    }
        -:  835:
        -:  836:    //uses switch to select card and perform actions
        4:  837:    switch( card ) 
branch  0 taken 25%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 25%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 25%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  838:    {
        -:  839:        case adventurer:
        1:  840:            play_adventurer(state);
call    0 returned 100%
        1:  841:            return 0;
        -:  842:
        -:  843:        case council_room:
    #####:  844:            play_council_room(state, handPos);
call    0 never executed
    #####:  845:            return 0;
        -:  846:
        -:  847:        case feast:
        -:  848:            //gain card with cost up to 5
        -:  849:            //Backup hand
    #####:  850:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  851:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  852:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  853:            }
        -:  854:            //Backup hand
        -:  855:
        -:  856:            //Update Coins for Buy
    #####:  857:            updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  858:            x = 1;//Condition to loop on
    #####:  859:            while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  860:                if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  861:                    if (DEBUG)
        -:  862:                        printf("None of that card left, sorry!\n");
        -:  863:
        -:  864:                    if (DEBUG){
        -:  865:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  866:                    }
        -:  867:                }
    #####:  868:                else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  869:                    printf("That card is too expensive!\n");
call    0 never executed
        -:  870:
        -:  871:                    if (DEBUG){
        -:  872:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  873:                    }
        -:  874:                }
        -:  875:                else{
        -:  876:
        -:  877:                    if (DEBUG){
        -:  878:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  879:                    }
        -:  880:
    #####:  881:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  882:                    x = 0;//No more buying cards
        -:  883:
        -:  884:                    if (DEBUG){
        -:  885:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  886:                    }
        -:  887:
        -:  888:                }
        -:  889:            }     
        -:  890:
        -:  891:            //Reset Hand
    #####:  892:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  893:                state->hand[currentPlayer][i] = temphand[i];
    #####:  894:                temphand[i] = -1;
        -:  895:            }
        -:  896:            //Reset Hand
        -:  897:
    #####:  898:            return 0;
        -:  899:
        -:  900:        case gardens:
    #####:  901:            return -1;
        -:  902:
        -:  903:        case mine:
    #####:  904:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  905:
    #####:  906:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  907:            {
    #####:  908:                return -1;
        -:  909:            }
        -:  910:
    #####:  911:            if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  912:            {
    #####:  913:                return -1;
        -:  914:            }
        -:  915:
    #####:  916:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  917:            {
    #####:  918:                return -1;
        -:  919:            }
        -:  920:
    #####:  921:            gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  922:
        -:  923:            //discard card from hand
    #####:  924:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  925:
        -:  926:            //discard trashed card
    #####:  927:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  928:            {
    #####:  929:                if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  930:                {
    #####:  931:                    discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  932:                    break;
        -:  933:                }
        -:  934:            }
        -:  935:
    #####:  936:            return 0;
        -:  937:
        -:  938:        case remodel:
        -:  939:           // play_remodel returns 0 or -1
    #####:  940:           return play_remodel(state, handPos, choice1, choice2);
call    0 never executed
        -:  941:
        -:  942:        case smithy:
        1:  943:            play_smithy(state, handPos);
call    0 returned 100%
        1:  944:            return 0;
        -:  945:
        -:  946:        case village:
    #####:  947:            play_village(state, handPos);
call    0 never executed
    #####:  948:            return 0;
        -:  949:
        -:  950:        case baron:
    #####:  951:            state->numBuys++;//Increase buys by 1!
    #####:  952:            if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  953:                int p = 0;//Iterator for hand!
    #####:  954:                int card_not_discarded = 1;//Flag for discard set!
    #####:  955:                while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  956:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  957:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  958:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  959:                        state->discardCount[currentPlayer]++;
    #####:  960:                        for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  961:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  962:                        }
    #####:  963:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  964:                        state->handCount[currentPlayer]--;
    #####:  965:                        card_not_discarded = 0;//Exit the loop
        -:  966:                    }
    #####:  967:                    else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  968:                        if(DEBUG) {
        -:  969:                            printf("No estate cards in your hand, invalid choice\n");
        -:  970:                            printf("Must gain an estate if there are any\n");
        -:  971:                        }
    #####:  972:                        if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  973:                            gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  974:                            state->supplyCount[estate]--;//Decrement estates
    #####:  975:                            if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  976:                                isGameOver(state);
call    0 never executed
        -:  977:                            }
        -:  978:                        }
    #####:  979:                        card_not_discarded = 0;//Exit the loop
        -:  980:                    }
        -:  981:
        -:  982:                    else{
    #####:  983:                        p++;//Next card
        -:  984:                    }
        -:  985:                }
        -:  986:            }
        -:  987:
        -:  988:            else{
    #####:  989:                if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  990:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  991:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  992:                    if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  993:                        isGameOver(state);
call    0 never executed
        -:  994:                    }
        -:  995:                }
        -:  996:            }
        -:  997:
        -:  998:
    #####:  999:            return 0;
        -: 1000:
        -: 1001:        case great_hall:
        -: 1002:            //+1 Card
        1: 1003:            drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1004:
        -: 1005:            //+1 Actions
        1: 1006:            state->numActions++;
        -: 1007:
        -: 1008:            //discard card from hand
        1: 1009:            discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1010:            return 0;
        -: 1011:
        -: 1012:        case minion:
        -: 1013:            //+1 action
    #####: 1014:            state->numActions++;
        -: 1015:
        -: 1016:            //discard card from hand
    #####: 1017:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1018:
    #####: 1019:            if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1020:            {
    #####: 1021:                state->coins = state->coins + 2;
        -: 1022:            }
        -: 1023:
    #####: 1024:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1025:            {
        -: 1026:                //discard hand
    #####: 1027:                while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1028:                {
    #####: 1029:                    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1030:                }
        -: 1031:
        -: 1032:                //draw 4
    #####: 1033:                for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1034:                {
    #####: 1035:                    drawCard(currentPlayer, state);
call    0 never executed
        -: 1036:                }
        -: 1037:
        -: 1038:                //other players discard hand and redraw if hand size > 4
    #####: 1039:                for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1040:                {
    #####: 1041:                    if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1042:                    {
    #####: 1043:                        if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1044:                        {
        -: 1045:                            //discard hand
    #####: 1046:                            while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1047:                            {
    #####: 1048:                                discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1049:                            }
        -: 1050:
        -: 1051:                            //draw 4
    #####: 1052:                            for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1053:                            {
    #####: 1054:                                drawCard(i, state);
call    0 never executed
        -: 1055:                            }
        -: 1056:                        }
        -: 1057:                    }
        -: 1058:                }
        -: 1059:
        -: 1060:            }
    #####: 1061:            return 0;
        -: 1062:
        -: 1063:        case steward:
    #####: 1064:            if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1065:            {
        -: 1066:                //+2 cards
    #####: 1067:                drawCard(currentPlayer, state);
call    0 never executed
    #####: 1068:                drawCard(currentPlayer, state);
call    0 never executed
        -: 1069:            }
    #####: 1070:            else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1071:            {
        -: 1072:                //+2 coins
    #####: 1073:                state->coins = state->coins + 2;
        -: 1074:            }
        -: 1075:            else
        -: 1076:            {
        -: 1077:                //trash 2 cards in hand
    #####: 1078:                discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1079:                discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1080:            }
        -: 1081:
        -: 1082:            //discard card from hand
    #####: 1083:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1084:            return 0;
        -: 1085:
        -: 1086:        case tribute:
    #####: 1087:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1088:                if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1089:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1090:                    state->deckCount[nextPlayer]--;
        -: 1091:                }
    #####: 1092:                else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1093:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1094:                    state->discardCount[nextPlayer]--;
        -: 1095:                }
        -: 1096:                else{
        -: 1097:                    //No Card to Reveal
        -: 1098:                    if (DEBUG){
        -: 1099:                        printf("No cards to reveal\n");
        -: 1100:                    }
        -: 1101:                }
        -: 1102:            }
        -: 1103:
        -: 1104:            else{
    #####: 1105:                if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1106:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1107:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1108:                        state->deckCount[nextPlayer]++;
    #####: 1109:                        state->discard[nextPlayer][i] = -1;
    #####: 1110:                        state->discardCount[nextPlayer]--;
        -: 1111:                    }
        -: 1112:
    #####: 1113:                    shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1114:                } 
    #####: 1115:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1116:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1117:                state->deckCount[nextPlayer]--;
    #####: 1118:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1119:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1120:                state->deckCount[nextPlayer]--;
        -: 1121:            }    
        -: 1122:
    #####: 1123:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1124:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1125:                state->playedCardCount++;
    #####: 1126:                tributeRevealedCards[1] = -1;
        -: 1127:            }
        -: 1128:
    #####: 1129:            for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1130:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1131:                    state->coins += 2;
        -: 1132:                }
        -: 1133:
    #####: 1134:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1135:                    drawCard(currentPlayer, state);
call    0 never executed
    #####: 1136:                    drawCard(currentPlayer, state);
call    0 never executed
        -: 1137:                }
        -: 1138:                else{//Action Card
    #####: 1139:                    state->numActions = state->numActions + 2;
        -: 1140:                }
        -: 1141:            }
        -: 1142:
    #####: 1143:            return 0;
        -: 1144:
        -: 1145:        case ambassador:
    #####: 1146:            j = 0;		//used to check if player has enough cards to discard
        -: 1147:
    #####: 1148:            if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1149:            {
    #####: 1150:                return -1;				
        -: 1151:            }
        -: 1152:
    #####: 1153:            if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1154:            {
    #####: 1155:                return -1;
        -: 1156:            }
        -: 1157:
    #####: 1158:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1159:            {
    #####: 1160:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1161:                {
    #####: 1162:                    j++;
        -: 1163:                }
        -: 1164:            }
    #####: 1165:            if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1166:            {
    #####: 1167:                return -1;				
        -: 1168:            }
        -: 1169:
        -: 1170:            if (DEBUG) 
        -: 1171:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1172:
        -: 1173:            //increase supply count for choosen card by amount being discarded
    #####: 1174:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1175:
        -: 1176:            //each other player gains a copy of revealed card
    #####: 1177:            for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1178:            {
    #####: 1179:                if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1180:                {
    #####: 1181:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1182:                }
        -: 1183:            }
        -: 1184:
        -: 1185:            //discard played card from hand
    #####: 1186:            discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1187:
        -: 1188:            //trash copies of cards returned to supply
    #####: 1189:            for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1190:            {
    #####: 1191:                for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1192:                {
    #####: 1193:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1194:                    {
    #####: 1195:                        discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1196:                        break;
        -: 1197:                    }
        -: 1198:                }
        -: 1199:            }			
        -: 1200:
    #####: 1201:            return 0;
        -: 1202:
        -: 1203:        case cutpurse:
        -: 1204:
    #####: 1205:            updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1206:            for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1207:            {
    #####: 1208:                if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1209:                {
    #####: 1210:                    for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1211:                    {
    #####: 1212:                        if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1213:                        {
    #####: 1214:                            discardCard(j, i, state, 0);
call    0 never executed
    #####: 1215:                            break;
        -: 1216:                        }
    #####: 1217:                        if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1218:                        {
    #####: 1219:                            for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1220:                            {
        -: 1221:                                if (DEBUG)
        -: 1222:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1223:                            }	
    #####: 1224:                            break;
        -: 1225:                        }		
        -: 1226:                    }
        -: 1227:
        -: 1228:                }
        -: 1229:
        -: 1230:            }				
        -: 1231:
        -: 1232:            //discard played card from hand
    #####: 1233:            discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1234:
    #####: 1235:            return 0;
        -: 1236:
        -: 1237:
        -: 1238:        case embargo: 
        -: 1239:            //+2 Coins
    #####: 1240:            state->coins = state->coins + 2;
        -: 1241:
        -: 1242:            //see if selected pile is in play
    #####: 1243:            if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1244:            {
    #####: 1245:                return -1;
        -: 1246:            }
        -: 1247:
        -: 1248:            //add embargo token to selected supply pile
    #####: 1249:            state->embargoTokens[choice1]++;
        -: 1250:
        -: 1251:            //trash card
    #####: 1252:            discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1253:            return 0;
        -: 1254:
        -: 1255:        case outpost:
        -: 1256:            //set outpost flag
        1: 1257:            state->outpostPlayed++;
        -: 1258:
        -: 1259:            //discard card
        1: 1260:            discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1261:            return 0;
        -: 1262:
        -: 1263:        case salvager:
        -: 1264:            //+1 buy
    #####: 1265:            state->numBuys++;
        -: 1266:
    #####: 1267:            if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1268:            {
        -: 1269:                //gain coins equal to trashed card
    #####: 1270:                state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1271:                //trash card
    #####: 1272:                discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1273:            }
        -: 1274:
        -: 1275:            //discard card
    #####: 1276:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1277:            return 0;
        -: 1278:
        -: 1279:        case sea_hag:
    #####: 1280:            for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1281:                if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1282:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1283:                    state->discardCount[i]++;
    #####: 1284:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1285:                }
        -: 1286:            }
    #####: 1287:            return 0;
        -: 1288:
        -: 1289:        case treasure_map:
        -: 1290:            //search hand for another treasure_map
    #####: 1291:            index = -1;
    #####: 1292:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1293:            {
    #####: 1294:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1295:                {
    #####: 1296:                    index = i;
    #####: 1297:                    break;
        -: 1298:                }
        -: 1299:            }
    #####: 1300:            if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1301:            {
        -: 1302:                //trash both treasure cards
    #####: 1303:                discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1304:                discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1305:
        -: 1306:                //gain 4 Gold cards
    #####: 1307:                for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1308:                {
    #####: 1309:                    gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1310:                }
        -: 1311:
        -: 1312:                //return success
    #####: 1313:                return 1;
        -: 1314:            }
        -: 1315:
        -: 1316:            //no second treasure_map found in hand
    #####: 1317:            return -1;
        -: 1318:    }
        -: 1319:
    #####: 1320:    return -1;
        -: 1321:}
        -: 1322:
function discardCard called 3 returned 100% blocks executed 78%
        3: 1323:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1324:{
        -: 1325:
        -: 1326:    //if card is not trashed, added to Played pile 
        3: 1327:    if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1328:    {
        -: 1329:        //add card to played pile
        3: 1330:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1331:        state->playedCardCount++;
        -: 1332:    }
        -: 1333:
        -: 1334:    //set played card to -1
        3: 1335:    state->hand[currentPlayer][handPos] = -1;
        -: 1336:
        -: 1337:    //remove card from player's hand
        3: 1338:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1339:    {
        -: 1340:        //reduce number of cards in hand
    #####: 1341:        state->handCount[currentPlayer]--;
        -: 1342:    }
        3: 1343:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1344:    {
        -: 1345:        //reduce number of cards in hand
    #####: 1346:        state->handCount[currentPlayer]--;
        -: 1347:    }
        -: 1348:    else 	
        -: 1349:    {
        -: 1350:        //replace discarded card with last card in hand
        3: 1351:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1352:        //set last card to -1
        3: 1353:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1354:        //reduce number of cards in hand
        3: 1355:        state->handCount[currentPlayer]--;
        -: 1356:    }
        -: 1357:
        3: 1358:    return 0;
        -: 1359:}
        -: 1360:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1361:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1362:{
        -: 1363:    //Note: supplyPos is enum of choosen card
        -: 1364:
        -: 1365:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1366:    if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1367:    {
    #####: 1368:        return -1;
        -: 1369:    }
        -: 1370:
        -: 1371:    //added card for [whoseTurn] current player:
        -: 1372:    // toFlag = 0 : add to discard
        -: 1373:    // toFlag = 1 : add to deck
        -: 1374:    // toFlag = 2 : add to hand
        -: 1375:
    #####: 1376:    if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1377:    {
    #####: 1378:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1379:        state->deckCount[player]++;
        -: 1380:    }
    #####: 1381:    else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1382:    {
    #####: 1383:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1384:        state->handCount[player]++;
        -: 1385:    }
        -: 1386:    else
        -: 1387:    {
    #####: 1388:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1389:        state->discardCount[player]++;
        -: 1390:    }
        -: 1391:
        -: 1392:    //decrease number in supply pile
    #####: 1393:    state->supplyCount[supplyPos]--;
        -: 1394:
    #####: 1395:    return 0;
        -: 1396:}
        -: 1397:
function updateCoins called 7 returned 100% blocks executed 82%
        7: 1398:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1399:{
        -: 1400:    int i;
        -: 1401:
        -: 1402:    //reset coin count
        7: 1403:    state->coins = 0;
        -: 1404:
        -: 1405:    //add coins for each Treasure card in player's hand
       42: 1406:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1407:    {
       35: 1408:        if (state->hand[player][i] == copper)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -: 1409:        {
       21: 1410:            state->coins += 1;
        -: 1411:        }
       14: 1412:        else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1413:        {
    #####: 1414:            state->coins += 2;
        -: 1415:        }
       14: 1416:        else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1417:        {
    #####: 1418:            state->coins += 3;
        -: 1419:        }	
        -: 1420:    }	
        -: 1421:
        -: 1422:    //add bonus
        7: 1423:    state->coins += bonus;
        -: 1424:
        7: 1425:    return 0;
        -: 1426:}
        -: 1427:
        -: 1428:
        -: 1429://end of dominion.c
        -: 1430:
